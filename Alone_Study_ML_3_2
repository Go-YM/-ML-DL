## 데이터와 모델 준비
import numpy as np

perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

from sklearn.model_selection import train_test_split

## 훈련 세트와 테스트 세트로 분할
train_input, test_input, train_target, test_target = train_test_split(perch_length,perch_weight,random_state=42)

## 훈련 세트와 테스트 세트 2차원 배열로 변환
train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)


## 최근접 이웃 개수를 3으로 하는 모델 훈련
from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor(n_neighbors = 3)

knr.fit(train_input, train_target)

# 50cm 농어의 무게 예측
print(knr.predict([[50]]))


## 산점도 그래프 그려보기
import matplotlib.pyplot as plt

# 50cm 농어의 이웃 구하기
distances, indexes = knr.kneighbors([[50]])

# 훈련 세트 산점도 그리기
plt.scatter(train_input, train_target)

# 훈련 세트 중 이웃 샘플 다시 그리기
plt.scatter(train_input[indexes],train_target[indexes],marker='D')

# 50cm 농어 데이터 그리기
plt.scatter(50,1033,marker='^')

plt.xlabel('length')
plt.ylabel('weight')
plt.show()

## 선형 회귀 알고리즘으로 모델 훈련
from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(train_input, train_target)

print(lr.predict([[50]]))


## 산점도 그래프에 직선 그래프 추가하기
# 훈련 세트의 산점도 그리기
plt.scatter(train_input,train_target)

# 15에서 50까지 1차 방정식 그래프 그리기 (lr.coef_ : 기울기, lr.intercept : y 절편)
# plt.plot([x1,x2],[y1,y2]) 이떄 y1, y2는 그래프에 x1, x2 대입한 값
plt.plot([15,50], [15*lr.coef_+lr.intercept_,50*lr.coef_+lr.intercept_])

# 50cm 농어 데이터
plt.scatter(50, 1241.8, marker='^')

plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(lr.score(train_input,train_target))
print(lr.score(test_input,test_target))

## 넘파이를 이용해 농어의 길이를 제곱한 배열과 농어의 길이 배열을 합쳐줌
train_poly = np.column_stack((train_input ** 2 , train_input))
test_poly = np.column_stack((test_input ** 2 , test_input))

lr = LinearRegression()
lr.fit(train_poly,train_target)

print(lr.predict([[50**2, 50]]))

## 산점도 그래프에 곡선 그리기
# 구간별 직선을 그리기 위해 15에서 49까지 정수 배열 만들기
point = np.arange(15,50)

# 훈련 세트의 산점도 그리기
plt.scatter(train_input, train_target)

# 15에서 49까지 2차 방정식 그래프 그리기
plt.plot(point, lr.coef_[0]*point**2+lr.coef_[1]*point+lr.intercept_)

# 50cm 농어 그리기
plt.scatter(50, 1574, marker = '^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(lr.score(train_poly,train_target))
print(lr.score(test_poly,test_target))
